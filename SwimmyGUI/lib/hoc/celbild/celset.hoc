begintemplate SNList // Like a Section List
public name, name_, list, differ, name_differ, add, del_all, ml, geo, geobox
public export
objref list, this, ml, geo, geobox
strdef name_, tstr
proc init() {
	name_ = $s1
	list = new List()
	ml = new List()
	geo = new List()
	differ = 0
	name_differ = 0
}
proc add() {
	list.append($o1)
	$o1.sets.append(this)
}
proc del_all() { local i, j
	for i=0, list.count-1 {
		j = list.object(i).sets.index(this)
		list.object(i).sets.remove(j)
	}
	list.remove_all()
}
proc name() {
	$s1 = name_
}

proc export() {local i
	sprint(tstr, "objref %s", name_)
//print tstr
	execute(tstr)
	sprint(tstr, "%s = new SectionList()", name_)
//print tstr
	execute(tstr)
	for i=0, list.count-1 {
		list.object(i).name(tstr)
		sprint(tstr, "%s %s.append()", tstr, name_)
//print tstr
		execute(tstr)
	}
}
endtemplate SNList

begintemplate SectionSubsets
public topol, hbox, g, update, snlist, save_data, showsel, bild, pr
public consist, esub, cexport
objref g, this, snlist, hbox, tobj, tobj1, bild, smap, imap
strdef tstr, tstr1
proc init() {
	showcel_active = 1
	esub = 0
	first = 1
	i=0
	snlist = new List()
	oldsel = -1
	bild = $o1
	snlist.append(bild.all)
	g = bild.gtopol
	panel()
	sprint(tstr, "%s", this)
	hbox.map(tstr)
}

proc cexport() {local i
	esub = $1
	if (bild.continuous == 0) {
		esub = 0
	}
	if (esub) {
		for i=0, snlist.count - 1 {
			snlist.object(i).export()
		}
	}
}

proc consist() {
	for i=0, snlist.count-1 {
		tobj = snlist.object(i).list
		tobj.remove_all()
	}
	for i=0, bild.topol.slist.count-1 {
		tobj = bild.topol.slist.object(i)
		for j=0, tobj.sets.count-1 {
			tobj.sets.object(j).list.append(tobj)
		}
	}
}
proc update() {local i, j
	showsel_active = 1
	consist()
	bild.topol.sel_all(0)
	snlist.select(oldsel)
	if (snlist.count > 0 && snlist.selected < 0) {
		snlist.select(0)
	}
	showsel1(snlist.selected)
	bild.topol.draw(g)
	name_differ()
	if (first) {
		first = 0
	}
	g.exec_menu("Select One")
	cexport(esub)
}

proc hints() {
xpanel("CellBuild Subsets hints")
xlabel("Usage Hints:")
xlabel("FIRST make a selection in the left Graph subwindow THEN press an action!")
xlabel("  That is, start by selecting some sections and then pressing")
xlabel("  the \"New SectionList\" button")
xlabel("")
xlabel("If the selection in this panel differs from the selected subset in the")
xlabel("  middle panel, that fact is indicated next to the subset name")
xlabel("")
xlabel("In this panel:")
xlabel("  Add to selection by dragging mouse.")
xlabel("  Add to selection by holding down shift key while pressing mouse.")
xlabel("  Mouse press selects nearest section, not nearest name.")
xlabel("")
xlabel("If a section occurs in more than one section list then")
xlabel("  the order of the list of section lists matters! They should")
xlabel("  generally be ordered from general to specific. This determines")
xlabel("  the order of execution of the Geometry and Membrane specification.")
xlabel("")
xpanel()
}

proc panel() {
	hbox = new HBox(3)
	hbox.intercept(1)
	hbox.ref(this)
	hbox.save("save()")
	snlist.browser("",tstr, "list_label(hoc_ac_)")
	snlist.select_action("showsel1(hoc_ac_)")
	snlist.accept_action("showsel1(hoc_ac_)")
	xpanel("")
	xlabel("First, select,")
	xmenu("Select")  
		xbutton("All", "sel_all(1)")
		xbutton("None", "sel_all(0)")   
		xbutton("Xor", "sel_xor(1)")  
	xmenu()
	g.menu_tool("Select One", "sel1")
	g.menu_tool("Select Subtree", "sel2")
	g.menu_tool("Select Basename", "sel3")
	xlabel("then, act.")
	xbutton("New SectionList", "newslist()")
	xbutton("Selection->SecList", "sel2slist()")
	xbutton("Delete SecList", "delslist() oldsel = -1")
	xbutton("Change Name", "chslist()")
	xbutton("Move up", "move(-1)")
	xbutton("Move down", "move(1)")
	xbutton("Hints", "hints()")
	xpanel()
	hbox.intercept(0)
}

proc move() {local i, j
	i = snlist.selected()
	bild.changed_ = 1
	if (i > -1) {
		j = i + $1
		if (j > -1 && j < snlist.count) {
			tobj = snlist.object(i)
			snlist.select(-1)
			snlist.remove(i)
			snlist.insrt(j,tobj)
			snlist.select(j)
			oldsel = -1
		}
	}
}

proc list_label() {local i
	i = $1
	if (snlist.object(i).name_differ) {
		sprint(tstr, "%s differs from selection", snlist.object(i).name_)
	}else{
		sprint(tstr, "%s", snlist.object(i).name_)
	}
}

proc showsel1() {
	if (showcel_active) showsel($1, g)
}
proc showsel() { local i
	bild.topol.sel_all(0)
	if ($1 > -1) {
		tobj = snlist.object($1).list
		for i=0, tobj.count - 1 {
			tobj.object(i).selected = 1
		}
	}
	bild.topol.draw($o2)
	differs($1)
	oldsel = $1
}

proc sel1() {
	bild.topol.sel1($1,$2,$3,$4)
	bild.topol.draw(g)
	differs(snlist.selected)
}
proc sel2() {
	bild.topol.sel2($1,$2,$3,$4)
	bild.topol.draw(g)
	differs(snlist.selected)
}

proc sel3() {local i, dmin, imin, d, x
	if ($1 == 2) {
		bild.topol.sel3($1,$2,$3,$4)
		bild.topol.draw(g)
		differs(snlist.selected)
	}
}

proc sel_all() {
	bild.topol.sel_all($1)
	bild.topol.draw(g)
	differs(snlist.selected)
}

proc sel_xor() {
	bild.topol.sel_xor($1)
	bild.topol.draw(g)
	differs(snlist.selected)
}

func get_subname() {local in
	if (string_dialog($s1, $s2) == 0) {
		return 0
	}
	if (bild.topol.checkname($s2, bild.topol.slist, "Section", 1) == 0) {
		return 0
	}
	i = name_declared($s2)
	if (i != 0 && i != 2) {
		sprint($s2, "%s is already declared and is not an objref", $s2)
		continue_dialog($s2)
		return 0
	}
	return 1
}

proc newslist() {local i
	bild.changed_ = 1
	tstr = ""
	i = snlist.selected()
	if (i >= 0) {
		tstr = snlist.object(i).name_
	}
	if (get_subname("New SectionList name", tstr) == 0) {
		return
	}
	for i=0, snlist.count-1 {
		if (strcmp(tstr, snlist.object(i).name_) == 0) {
			sprint(tstr, "%s is already a SectionList name", tstr)
			continue_dialog(tstr)
			return
		}
	}			
	snlist.append(new SNList(tstr))
	snlist.select(snlist.count-1)
	name_differ()
	oldsel = snlist.count-1
	sel2slist()
}

proc chslist() { local i, j
	bild.changed_ = 1
	i = snlist.selected()
	if (i >= 0) {
		tstr = snlist.object(i).name_
		
		if (get_subname("Change SectionList name to", tstr) == 0) {
			return
		}

		for j=0, snlist.count-1 {
			if (i != j && strcmp(tstr, snlist.object(j).name_) == 0) {
				sprint(tstr, "%s is already a SectionList name", tstr)
				continue_dialog(tstr)
				return
			}
		}
		tobj = snlist.object(i)
		if (esub) {
			sprint(tstr1, "objref %s", tobj.name_)
//print tstr1
			execute(tstr1)
			bild.mech_export()
		}
		tobj.name_ = tstr
		snlist.select(-1)
		snlist.remove(i)
		snlist.insrt(i, tobj)
		snlist.select(i)
		name_differ()
		sel2slist()
	}
}

proc delslist() {local i
	bild.changed_ = 1
	i = snlist.selected()
	if (i >= 0) {
		snlist.object(i).del_all()
		if (esub) {
			sprint(tstr1, "objref %s", snlist.object(i).name_)
//print tstr1
			execute(tstr1)
			bild.mech_export()
		}
		snlist.select(-1)
		snlist.remove(i)
		bild.topol.sel_all(0)
	}
}

proc sel2slist() {local i, j
	bild.changed_ = 1
	i = snlist.selected
	if (i >= 0) {
		tobj = snlist.object(i)
		tobj.del_all()
		for j=0, bild.topol.slist.count-1 {
			tobj1 = bild.topol.slist.object(j)
			if (tobj1.selected) {
				tobj.add(tobj1)
			}
		}
		if (esub) {tobj.export() bild.mech_export()}
	}
	differs(snlist.selected)
}

proc differs() {local i, j, k, b
	i = $1
	b = 1
	if (i >= 0) {
		tobj = snlist.object(i).list
		k = 0
		for j = 0, tobj.count-1 {
			if (tobj.object(j).selected) {
				tobj.object(j).selected += 1
			}else{
				b = 0
			}
		}
		tobj = bild.topol.slist
		for j=0, tobj.count-1 {
			k = tobj.object(j).selected
			if (k == 1) {
				b = 0
			}else if (k == 2) {
				tobj.object(j).selected = 1
			}
		}
		snlist.object(i).differ = (b == 0)
		snlist.select(i)
	}
	name_differ()
}
proc name_differ() {local i, j
	j = snlist.selected
	for i=0, snlist.count-1 {
		tobj = snlist.object(i)
		if (i != j) {
			tobj.differ = 0
		}
//printf("differ=%d name_differ=%d\n", tobj.differ, tobj.name_differ)
		if (tobj.differ != tobj.name_differ) {
			tobj.name_differ = tobj.differ
			showcel_active = 0
			snlist.remove(i)
			snlist.insrt(i, tobj)
			snlist.select(j)
			showcel_active = 1
		}
	}
}

proc save_data() {local i, j
	update()
	sprint(tstr, "}\n{object_push(%s)}\n{first = 0}", $s2)
	$o1.save(tstr)
	for i=0,bild.topol.slist.count-1 {
		bild.topol.slist.object(i).selected = i
	}	
	for i=0, snlist.count-1 {
		tobj = snlist.object(i)
		if (tobj == bild.all) { continue }
		sprint(tstr, "{tobj = new SNList(\"%s\") snlist.append(tobj)}",tobj.name_)
		$o1.save(tstr)
		tobj = tobj.list
		sprint(tstr, "for i=0,%d tobj.add(bild.topol.slist.object(fscan()))",tobj.count-1)
		$o1.save(tstr)
		for j=0,tobj.count-1 {
			sprint(tstr, "%d", tobj.object(j).selected)
			$o1.save(tstr)
		}
	}
	$o1.save("{consist()}\n{object_pop()}\n{")
}

proc pr() {local i, j
	update()
	prdec($o1, "")
	$o1.printf("\nproc subsets() { local i")
	prdec($o1,"  ")
	$o1.printf("\n")
	for i = 0, snlist.count - 1 {
		tobj = snlist.object(i)
		$o1.printf("  %s = new SectionList()\n", tobj.name_)
		pr_subset($o1, tobj)
		$o1.printf("\n")
	}
	$o1.printf("}\n")
}

proc prdec() {
	for i = 0, snlist.count - 1 {
		if (i%7 == 0) {
			$o1.printf("\n%sobjref %s", $s2, snlist.object(i).name_)
		}else{
			$o1.printf(", %s", snlist.object(i).name_)
		}
	}
}

proc pr_subset() { local i, j, ni1, ni2, id1, id2
	// To be a bit more compact in expressing
	// the SectionList in hoc, we use for loops for contiguous indices.
	// args are File and SNList
	// topol.validname() has already been called and so
	// topol.unique_name is a Vector
	// that contains the object indices of the names with largest id.
	// This vector thus gives us our order for the unique names.
	// Furthermore the unique_name_index field of each section object
	// gives the index into the unique_name Vector.

	// construct Vector index map for subset of form
	// uniquenameindex*1e6 + arayindex
	imap = new Vector($o2.list.count)
	for i=0, imap.size-1 {
		tobj1 = $o2.list.object(i)
		imap.x[i] = tobj1.unique_name_index*1e6 + tobj1.id
	}
	// index vector sort gives us easily findable contiguous sets of
	// indices
	smap = imap.sortindex()
	for i=0, smap.size-1 {
		j = imap.x[smap.x[i]]
		ni1 = int(j/1e6)
		id1 = j - ni1*1e6
		id2 = id1
		for i = i+1, smap.size-1 {
			j = imap.x[smap.x[i]]
			ni2 = int(j/1e6)
			if ( ni2 > ni1 || id2 != j - ni2*1e6 - 1) {
				break
			}
			id2 = j - ni2*1e6
		}
		i = i-1
		tobj1 = bild.topol.slist.object(bild.topol.unique_name.x[ni1])
		if (id2 > id1) {
			$o1.printf("    for i=%d, %d %s[i] %s.append()\n",\
				id1, id2, tobj1.name_, $o2.name_)
		}else if (id1 > 0){
			$o1.printf("    %s[%d] %s.append()\n",\
				tobj1.name_, id1, $o2.name_)
		}else{
			$o1.printf("    %s %s.append()\n",\
				tobj1.name_, $o2.name_)
		}
	}
}

endtemplate SectionSubsets

